#include"netevent.bgt"
#include"bip.bgt"
int layout=0; const int ru=0, en=1, num=2, punct=3; string[] layouts(4);
int[] telegrafs={90,190};
int lasttel=0;
bool canpause=false, dkmplaying=false, escape=false, speakletters=false, soundon=true, dkm=false;
timer sendzero;
sound[] dit(2), dah(2); sound bip, mstart, mend, dkms, dkme; sound@ incomsound;
file morsefile;
int[] morses;
int speed=70, w, i=0;
int telegraf=0; bool opened, synes=false, pause=false, stop=false;
string morsename, ft, kb, lastbrl, msg, incom;

void main(){
loadprocs();
set_error_output("interpreter/errors.log");
timer pr;
loaddicts();
show_game_window("morse exercise");
if(output!="def"){open_sound_device(string_to_number(output));}
if(directory_exists("stream")){
directory_delete("stream");
string[] sods=list_sound_devices();
wait(500);
int mpos=0;
speak("choose output device, "+sods.length()+" devices found."); speak(sods[mpos]);
while(!key_down(KEY_ESCAPE)){wait(5);
if(key_pressed(KEY_DOWN)){mpos++; if(mpos>=sods.length()){mpos--;} speak(sods[mpos]);}
if(key_pressed(KEY_UP)){mpos--; if(mpos<0){mpos--;} speak(sods[mpos]);}
if(key_pressed(KEY_RETURN) or key_pressed(KEY_NUMPADENTER)){if(!open_sound_device(mpos)){alert("error",get_last_error_text()); exit();} break;}
}

}

mstart.load("sounds\\start.wav"); mend.load("sounds\\end.wav"); mstart.volume=200; mend.volume=200;
dkms.load("sounds/dkmstart.wav"); dkme.load("sounds/dkmend.wav");
if(!bip.load("sounds/beep.ogg")){bipcr(); bip.load("sounds/beep.ogg");}
dit[0].load("sounds/dot.wav"); dah[0].load("sounds/dash.wav");
dit[1].load("sounds/dot2.wav"); dah[1].load("sounds/dash2.wav");

string dotdash;
timer minute;
int starttime=1,endtime=0;
while(true){wait(5);
checknet();
checkprocs();
synes=false; stop=false;
checklayout();
if(key_pressed(KEY_F1)){if(telegraf==0){w=speed; telegraf=1; speed=telegrafs[0]; sptest();}
else if(telegraf==1){if(braille!="none"){telegraf=2;}else{telegraf=0;} dkm=false; speed=w; sptest();}
else if(telegraf==2){telegraf=0;sptest();}
}
if(!connected){
if(key_pressed(KEY_F2)){dit[0].play_wait(); dit[0].play(); record();}
if(key_pressed(KEY_F3)){guess();}
if(key_pressed(KEY_F4)){tx();}
if(key_pressed(KEY_F5)){notepad();}
if(key_pressed(KEY_F6)){string thetime=input_box("enter the time","enter the time when the morser should morse","9:0:0");string thetext=input_box("enter text","enter text to morse at that time"); createproc(thetime,thetext);}
if(key_released(KEY_F7)){calibratewpm();}
}
if(key_pressed(KEY_F10)){if(!connected){connect();}else{disconnect();}}
if(key_pressed(KEY_F11)){if(dkm){dkm=false; speak("morse typewriter sound off"); if(lasttel!=1){speed=w;}else{speed=telegrafs[0];} telegraf=lasttel;}else{dkm=true; lasttel=telegraf; speak("morse typewriter sound on"); if(telegraf!=1){w=speed;} telegraf=1; speed=telegrafs[1];}}
if(key_pressed(KEY_F12)){if(soundon){soundon=false; set_sound_master_volume(-100); speak("sound, off");}else{soundon=true; set_sound_master_volume(0); speak("sound, on");}}
if(escape){speak("main window"); escape=false;}
if(key_pressed(KEY_TAB)){if(speakletters){speakletters=false; speak("letter speaking disabled");}else{speakletters=true;speak("letter speaking enabled");}}
if(telegraf!=1){
if(key_down(KEY_LCONTROL) and key_down(KEY_LEFT) and speed<120 and pr.elapsed>=50){pr.restart(); speed++;}
if(key_down(KEY_LCONTROL) and key_down(KEY_RIGHT) and speed>25 and pr.elapsed>=50){pr.restart(); speed--;}
if(key_down(KEY_LCONTROL) and (key_released(KEY_RIGHT) or key_released(KEY_LEFT))){sptest();}
if(key_up(KEY_LCONTROL) and key_down(KEY_LEFT) and dkm==false){dot(); dotdash+="."; msg+=speed+" "+(-speed)+" ";endtime=minute.elapsed;}
if(key_up(KEY_LCONTROL) and key_down(KEY_RIGHT) and dkm==false){dash();dotdash+="-"; msg+=speed*3+" "+(-speed)+" "; endtime=minute.elapsed;}


if(telegraf==0){
if((key_down(KEY_UP) and pr.elapsed>50)&&bip.pitch<400){pr.restart();bip.pitch=bip.pitch+5; bip.play();}
if((key_down(KEY_DOWN) and pr.elapsed>50)&&bip.pitch>30){pr.restart();bip.pitch=bip.pitch-5; bip.play();}}
if(key_released(KEY_UP) or key_released(KEY_DOWN)){bip.stop();}}

kb=get_characters();
if(kb!="" and kb!="  " and kb!=" " and kb!="   "){morze(kb);}
if(key_pressed(KEY_SPACE)){playfade(); starttime=minute.elapsed; if(endtime>=5 and connected){msg+=endtime-starttime+" ";}}
if(key_released(KEY_SPACE)){stopfade(); endtime=minute.elapsed; if(connected){msg+=(endtime-starttime)+" ";} if(endtime-starttime<speed*2){dotdash+=".";}else{dotdash+="-";}}
if(key_up(KEY_SPACE) and minute.elapsed-endtime>speed*3 and starttime<endtime){starttime=endtime; if(connected){send("p"+bip.pitch+" "+msg); msg=""; } string frommor=frommorse(dotdash); if(speakletters){speak(frommor);} else{speak(frommor,2);} dotdash="";}
if(key_pressed(KEY_RETURN)){wait(5);morze(ft,key_pressed(KEY_LSHIFT));}
if(key_pressed(KEY_RSHIFT)){ft=input_box("enter text", "enter text to translate"); morze(ft,false);}
if(key_pressed(KEY_RCONTROL)){morsename=input_box("file name", "enter the name or path of text file you would like to open and morse"); opened=morsefile.open(morsename+".txt", "r"); if(opened){morze(morsefile.read());}}
if(key_pressed(KEY_ESCAPE)){exit(); wait(5);}
}
}
void dot(int last=0){checkthings();
if(telegraf==1){dit[dk()].stop(); dit[dk()].play(); wait(speed/2); if(last==1){stopdkm();} wait(speed/2);}
if(telegraf==2){upbr(); wait(speed); downbr(); wait(speed);}
if(telegraf==0){playfade(); wait(speed); stopfade(); wait(speed);}
}
void dash(int last=0){checkthings();
if(telegraf==1){dah[dk()].stop(); dah[dk()].play(); wait(speed*1.5); if(last==1){stopdkm();} wait(speed/2);}
if(telegraf==0){playfade(); wait(speed*3); stopfade(); wait(speed);}
if(telegraf==2){upbr(); wait(speed*3); downbr(); wait(speed);}
}
void space(){checkthings();
speak("",2);
stopdkm();
if(telegraf==1){wait(speed);}
if(telegraf!=1){wait(speed*2);}
}
void bigspace(){checkthings();
speak("",2);
if(telegraf==1){wait(speed*2);}
if(telegraf==0){wait(speed*4);}
if(telegraf==2){wait(speed*4);}
}
void sptest(){morze("test");}
void checkthings(){
if(key_released(KEY_ESCAPE)){escape=true; wait(5); return;}
if(canpause){
}
if(key_pressed(KEY_RETURN)){stop=true;}
}
void morze(string morse,bool willsave=false){
morse=string_to_lower_case(morse);
morse=string_replace(morse,"/time",time(), true);
string[] str=string_split(replace,",",false);
for(int i=0;i<str.length;i++){if(str[i].length()==2){
morse=string_replace(morse,str[i][0],str[i][1],true);
}else{input_box("error", "not valid format", str[i]+" | "+replace); exit();}}
escape=false;
if(telegraf>=1 and willsave){alert("cannot save","you are using telegraf sound. it cannot be saved to a wav file. press f1 to switch");}
morses.resize(0);
synes=false;
int thelast=0;
for(i=0; i<morse.length(); i++){
checkthings();
if(escape){return;}
if(!stop){
if(telegraf<2){speak(morse[i],2);}
if(morse[i]!=" "){playdkm();}
if(!synes){
if(morse[i]==" "){bigspace();}
string getval;
morsedict.get(morse[i],getval);
for(int ii=0;ii<getval.length();ii++){ if(ii==getval.length()-1){thelast=1;}else{thelast=0;}if(getval[ii]=="."){dot(thelast);}else{dash(thelast);}} if(morse[i].length()>0){space();}
if(morse[i]=="["){synes=true;}}
if(synes){
if(morse[i]==" "){space();}
if(morse[i]=="/"){space(); space(); space();}
if((morse[i]=="1")or(morse[i]=="-")){dash();}
if((morse[i]=="0")or(morse[i]==".")){dot();}
if(morse[i]=="]"){synes=false;}
}
speak("",2);}
}
if(telegraf==0){if(willsave){save(morses);}else{save(morses,1);}}
canpause=false;}
void pausewait(){}
void record(){
int[] arr;
timer rect; rect.pause();
while(!key_pressed(KEY_RETURN) or key_pressed(KEY_NUMPADENTER)){wait(5);
if(key_pressed(KEY_SPACE)){playfade(); if(rect.running){arr.insert_last(rect.elapsed*-1); rect.restart();}else{rect.restart();}}
if(key_released(KEY_SPACE)){stopfade(); if(rect.elapsed>0){arr.insert_last(rect.elapsed); rect.restart();}}
if(key_released(KEY_ESCAPE)){morze("cancel"); return;}
}
rect.pause	();
save(arr);

}
void showarray(int[] val){
string rval();
for(int i=0;i<val.length();i++){rval+=" "+val[i];}
 input_box("d","d",rval);
}
void save(int[] val, int playnotsave=0){
if(escape){return;}
while(key_down(KEY_RETURN) or key_down(KEY_NUMPADENTER)){wait(5);}
tone_synth synth;
synth.waveform_type=3;
int freq=bip.pitch*10;
for(int i=0;i<val.length();i++){if(val[i]>0){synth.freq_ms(freq,val[i]); synth.rest_ms(val[i]);}else{synth.rest_ms(val[i]*-1);}}
sound@ theresult=synth.write_wave_sound();
if(!escape){theresult.play();}else{return;}
while(playnotsave==1 and theresult.playing){wait(5); checkthings(); if(escape){return;}}
while(playnotsave==0){wait(5);
if(key_pressed(KEY_RETURN) or key_pressed(KEY_NUMPADENTER)){synth.write_wave_file(input_box("enter wave file sound name","enter the name of your morse file")+".wav"); return;}
if(key_pressed(KEY_ESCAPE)){morze("cancel"); return;}
}
}
void playfade(){
if(telegraf==0){se(); wait(10);}
if(telegraf==2){upbr(); return;}
bip.seek(0);
if(bip.play()){if(key_up(KEY_LCONTROL)){screen_reader_stop_speech(4);}}
}
void stopfade(){
if(telegraf==2){downbr(); return;}
bip.seek(1995);
if(key_up(KEY_LCONTROL)){screen_reader_stop_speech(4);}
if(telegraf==0){se(1);}
}
void guess(){
int groups=string_to_number(input_box("enter group","enter how many letters in 1 group you want to recognize. after that, get ready to play. press enter, and guess letters"));
string letters=layouts[layout]+layouts[2];
if(layout==ru){for(int yyy=0;yyy<exclude.length();yyy++){letters=string_replace(letters,exclude[yyy],"",true);}}
if(groups<=0 or groups>=10){alert("error","enter number from 1 to 10"); return;}
string current;
timer minute;
int errors=0,groupscomplete=0,charscomplete=0;
while(minute.elapsed<=60000){
get_characters();
current="";
for(int i=0;i<groups;i++){current+=debug(letters[random(0,letters.length()-1)]);}
string chars="";
morze(current);
if(escape){escape=false;return;}
chars=get_characters();
while(chars.length()<groups and minute.elapsed<=60000){chars+=get_characters(); if(key_released(KEY_SPACE)){return;}}
if(chars.length()<groups){charscomplete+=chars.length(); break;}
errors+=string_distance(chars,current);
groupscomplete++;
charscomplete=groupscomplete*groups;

}
alert("summary","you completed "+groupscomplete+" groups with "+groups+" letters in each, making guessing speed of "+(charscomplete-errors)+" letters per minute! you are given a totaly of "+charscomplete+" letters, but you made "+errors+" mistakes");
}
string debug(string val){return val;}
void speak(string val, int mode=0){if(mode==0 or mode==1){screen_reader_speak(4,val);} if(mode==0 or mode==2){lastbrl=val;screen_reader_braille(4,val);}}
void tx(){
int groups=string_to_number(input_box("enter group","enter how many letters in 1 group you want to tranceave. after that, get ready to play. press enter, and type letters that computer says, to the morse key with space key."));
string letters=layouts[layout]+layouts[2];
if(layout==ru){for(int yyy=0;yyy<exclude.length();yyy++){letters=string_replace(letters,exclude[yyy],"",true);}}
speak("5");wait(1000);speak("4");wait(1000);speak("3");wait(1000);speak("2");wait(1000);speak("1");wait(1000);
if(groups<=0 or groups>=10){alert("error","enter number from 1 to 10"); return;}
string current;
timer minute;
int errors=0,groupscomplete=0,charscomplete=0;
int starttime,endtime;
string dotdash="";
while(minute.elapsed<=60000){
current="";
for(int i=0;i<groups;i++){current+=debug(letters[random(0,letters.length()-1)]);}
string chars="";
if(i>0){speak("next");}
for(int ii=0;ii<current.length();ii++){speak(current[ii]);}
while(minute.elapsed<=60000 and chars.length()<groups){
if(key_up(KEY_LCONTROL) and key_down(KEY_LEFT) and dkm==false){dot(); dotdash+="."; endtime=minute.elapsed;}
if(key_up(KEY_LCONTROL) and key_down(KEY_RIGHT) and dkm==false){dash();dotdash+="-"; endtime=minute.elapsed;}
if(key_pressed(KEY_ESCAPE)){escape=true;}
if(escape){escape=false;return;}
if(key_pressed(KEY_SPACE)){playfade(); starttime=minute.elapsed;}
if(key_released(KEY_SPACE)){stopfade(); endtime=minute.elapsed; if(endtime-starttime<speed*2){dotdash+=".";}else{dotdash+="-";}}
if(key_up(KEY_SPACE) and minute.elapsed-endtime>speed*3 and starttime<endtime){starttime=endtime; string frommor=frommorse(dotdash); speak(frommor); chars+=frommor; dotdash="";}
}
if(chars.length()==groups and minute.elapsed<=60000){groupscomplete++; charscomplete=groupscomplete*groups; errors+=string_distance(chars,current);}
if(chars.length()<groups and minute.elapsed>=60000){charscomplete+=chars.length(); break;}
}
while(!key_released(KEY_RETURN)){if(key_pressed(KEY_ESCAPE)){return;} if(key_pressed(KEY_SPACE)){speak("complete. press enter to get info");}}
alert("summary","you completed "+groupscomplete+" groups with "+groups+" letters in each, making guessing speed of "+(charscomplete-errors)+" letters per minute! you are given a totaly of "+charscomplete+" letters, but you made "+errors+" mistakes");
}
string frommorse(string val){
string valu;
if(string_is_digits(val[0]) and val[1]=="["){layout=string_to_number(val[0]); val=string_trim_left(val,2);}
if(string_right(val,1)=="]"){val=string_trim_right(val,1);}
string[] themorse=string_split(val," ",false);
for(int ii=0;ii<themorse.length();ii++){
string keys=layouts[layout]+layouts[2]+layouts[3];
for(int i=0;i<keys.length();i++){string morsc; morsedict.get(keys[i],morsc); if(morsc==themorse[ii]){valu+=keys[i];}}}
return valu;
}
void checklayout(){wait(5);
while(!is_game_window_active()){wait(5); checknet(); checkprocs();}
if(key_up(KEY_SPACE) and sendzero.elapsed>=3000){sendzero.restart(); speak(lastbrl,2);}
if(key_down(KEY_LCONTROL) and key_pressed(KEY_SPACE)){
switch(layout){
case 0:layout=1;speak("english"); break;
case 1:layout=0;speak("russian"); break;
}}}
void notepad(){
speak("notepad!");
timer minute();
string thetext,morsetext,dotdash;
int starttime=1,endtime=0;
while(true){
if(key_pressed(KEY_ESCAPE)){escape=true;}
if(escape){escape=false;return;}
if(key_up(KEY_LCONTROL)){
if(key_pressed(KEY_SPACE)){playfade(); starttime=minute.elapsed;}
if(key_released(KEY_SPACE)){stopfade(); endtime=minute.elapsed; if(endtime-starttime<speed*2){dotdash+=".";}else{dotdash+="-";}}
if(key_up(KEY_SPACE) and minute.elapsed-endtime>speed*3 and starttime<endtime){starttime=endtime; string frommor=frommorse(dotdash); speak(frommor); thetext+=frommor; morsetext+=dotdash+" ";dotdash="";}
if(key_up(KEY_SPACE) and minute.elapsed-endtime>speed*7 and starttime==endtime){starttime=1; endtime=0; dotdash=""; thetext+=" "; morsetext+="/ "; dotdash=""; speak("=",2);}
}
if(key_down(KEY_LCONTROL)){
if(key_pressed(KEY_C)){clipboard_copy_text(thetext); speak("copied");}
if(key_pressed(KEY_E)){thetext=input_box("edit","edit your morsed text",thetext); morsetext=tomorse(thetext);}
if(key_pressed(KEY_S)){file ff;ff.open(input_box("save","save the text to a file. enter file name with extention"),"w"); if(key_down(KEY_LSHIFT)){ff.write(thetext);}else{ff.write("["+morsetext+"]");} ff.close(); speak("saved");}
}
checklayout();
}
}
void calibratewpm(){
speak("start morsing.");
int[] everage;
timer minute();
int starttime=1,endtime=0;
while(true){
if(key_pressed(KEY_ESCAPE)){escape=true;}
if(escape){escape=false;return;}
if(key_pressed(KEY_SPACE)){playfade(); starttime=minute.elapsed;}
if(key_released(KEY_SPACE)){stopfade(); endtime=minute.elapsed; if(endtime-starttime<130){everage.insert_last(endtime-starttime);}else{everage.insert_last((endtime-starttime)/3);}}
if(everage.length>=50){break;}
}
speed=0;
for(int i=0;i<everage.length();i++){speed+=everage[i];}
speed/=everage.length();
wait(1500); morze("hello");}
void upbr(){se(); speak(braille,2);}
void downbr(){se(1); speak("",2);}
void se(int stend=0){if(dkm){return;}if(stend==0){mstart.stop(); mstart.play();}else{mend.stop(); mend.play();}}
string time(){
string timeval;
if(TIME_HOUR<10){timeval+="0";}
timeval+=TIME_HOUR+" ";
if(TIME_MINUTE<10){timeval+="0";}
timeval+=TIME_MINUTE;
return timeval;}

string tomorse(string val){
string valu;
string[] str=string_split(replace,",",false);
for(int i=0;i<str.length;i++){if(str[i].length()==2){val=string_replace(val,str[i][0],str[i][1],true);}}
for(int i=0;i<val.length();i++){
if(val[i]==" " or val[i]=="	" or val[i]=="\r" or val[i]=="/n"){valu+="/ "; continue;}
string valuget=""; morsedict.get(val[i],valuget); valu+=valuget+" ";
}
//string deb=frommorse(valu);
//if(deb!=val){input_box("invalid!","invalid translation occurred. it is developers mistake",deb+";"+val);}
return layout+"["+valu+"]";
}
void debug(){
string tofrom=frommorse(input_box("what","what letter to morseout"));
input_box("and the result","is here",tofrom);}
void playdkm(){if(dkm and !dkmplaying){dkms.stop();dkms.play_wait(); dkmplaying=true;}}
void stopdkm(){if(dkm and dkmplaying){dkme.stop(); dkmplaying=false; dkme.play();}}
int dk(){if(dkm){return 1;}else{return 0;}}
void synthesize(string text){
incom="";
bool st=false;
// input_box("d","d",text);
string[] val=string_split(text," ",false);
tone_synth synth;
synth.waveform_type=3;
int freq=bip.pitch*10;
for(int i=0;i<val.length();i++){if(val[i][0]=="p"){freq=string_to_number(string_trim_left(val[i],1))*10;} else{if(string_to_number(val[i])>0){st=true; synth.freq_ms(freq,string_to_number(val[i])); synth.rest_ms(string_to_number(val[i]));}else{if(i!=val.length-1 and st and i!=0){synth.rest_ms(string_to_number(val[i])*-1);}}}}
synth.rest_ms(250);
if(@incomsound!=null){incomsound.stop();}
@incomsound=synth.write_wave_sound();
incomsound.play();}
void checknet(){
if(!connected){return;}
incom+=request();
if(incom!="" and @incomsound!=null and !incomsound.playing){synthesize(incom);}
}